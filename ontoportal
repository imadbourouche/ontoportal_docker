#!/usr/bin/env bash
start_api(){
	source ./bin/run_api.sh ./env
}

run_ui(){
	source .env
	api_url="$API_URL"
	api_key="$API_KEY"
	if [ -z "$api_url" ] || [ -z "$api_key" ]; then
		echo "[-] Error: Missing required arguments. Please provide both --api-url and --api-key or update them in your .env"
		exit 1
	fi
	echo "[+] Starting the UI"
	bash_cmd="cp /app/config/bioportal_config_env.rb.sample /app/config/bioportal_config_development.rb && cp /app/config/database.yml.sample /app/config/database.yml && (bundle check || bundle install) && bin/rails db:prepare && bundle exec rails s -b 0.0.0.0 -p 3000"
	eval "docker compose -f docker-compose_ui.yml -p ontoportal_docker run --rm -d --name ui-service --service-ports rails bash -c \"$bash_cmd\""

}

start() {
	start_ui(){
		echo "[+] Getting compose file from: $ORGANIZATION_NAME$COMPOSE_UI_FILE_PATH"
		eval "curl -sS -L https://raw.githubusercontent.com/$ORGANIZATION_NAME$COMPOSE_UI_FILE_PATH -o docker-compose_ui.yml"
		
		echo "[+] Changing lines in docker-compose_ui.yml"
		file_path="./docker-compose_ui.yml"
		sed -i 's/- .:\/app/- app_web:\/app/' "$file_path"
		sed -i 's/retries: 3/retries: 100/' "$file_path"
		sed -i '/^volumes:/a \ \ app_web:' "$file_path"
		
		echo "[+] Running ui script"
		run_ui
		if [ $? -ne 0 ]; then
			echo "[-] Error in run_ui function. Exiting..."
			exit 1
		fi

		echo "[+] The UI is running successfully."
	}

	clean
	if [ -f ".env" ]; then
		echo "[+] Env file exist"
	else
		echo "[+] Env file does not exist"
		cp .env.sample .env
	fi

	if [ -z "$1" ]; then
		sed -i "s/^SERVICE=.*/SERVICE=ontoportal/" .env
	else
		sed -i "s/^SERVICE=.*/SERVICE=$1/" .env
	fi

	source .env
	if [ "$SERVICE" == "api" ]; then
		start_api
	elif [ "$SERVICE" == "ui" ]; then
		start_ui
	else	
		start_api
		start_ui
	fi

}

stop() {
  echo "[+] Stopping services"
  docker container stop api-service
  docker container stop ui-service
  docker ps -a --format "{{.Names}}" | grep "ontoportal_docker" | awk '{print "docker stop " $1}' | sh
}

deploy(){
	if [ -f ".env" ]; then
		echo "[+] Env file exist"
	else
		echo "[+] Env file does not exist"
		cp .env.sample .env
	fi

	if [ -z "$1" ]; then
		sed -i "s/^SERVICE=.*/SERVICE=ontoportal/" .env
	else
		sed -i "s/^SERVICE=.*/SERVICE=$1/" .env
	fi

	echo "[+] Checking for env variables"
	source .env
	variables=("IMAGE_NAME" "SERVER_IP" "DOCKER_REGISTRY_NAME" "KAMAL_REGISTRY_PASSWORD" "SSH_USER")

	for variable in "${variables[@]}"; do
		if [ -z "${!variable}" ]; then
			echo "[-] Error: $variable is not set."
			exit
		fi
	done

	echo "[+] Changing kamal deploy.yml file"
	echo "" > config/deploy.yml
	echo "service: ontoportal_docker" > config/deploy.yml
	echo "image: ${IMAGE_NAME}" >> config/deploy.yml
	echo -e "servers:\n  - ${SERVER_IP}" >> config/deploy.yml
	echo "run_directory: /root/app" >> config/deploy.yml
	echo -e "registry:\n  username:\n    - DOCKER_REGISTRY_NAME\n  password:\n    - KAMAL_REGISTRY_PASSWORD" >> config/deploy.yml
	echo -e "ssh:\n  user: ${SSH_USER}" >> config/deploy.yml
	echo "volumes: /var/run/docker.sock:/var/run/docker.sock" >> config/deploy.yml
	echo -e "traefik:\n  host_port: 4000" >> config/deploy.yml
	echo -e "healthcheck:\n  cmd: /bin/true" >> config/deploy.yml
	echo "[+] Starting the deployment"
	kamal setup -vv

}

clean(){
  echo "[+] Cleaning the server"

  rm -f docker-compose*
  docker container rm -f api-service ui-service 2>/dev/null
  docker ps -a --format "{{.Names}}" | grep "ontoportal_docker" | awk '{print "docker rm -f " $1}' | sh
  docker volume rm ontoportal_docker_rails_cache > /dev/null 2>&1
}

show_help() {
    echo "Usage: $0 <command>"
    echo
    echo "Commands:"
    echo "  start   : Start the ontologies API and UI (Default Mode / Personilized Mode)"
    echo "  deploy  : Deploy the application using Kamal to the server"
	echo "  stop    : Stop the API and UI services"
    echo "  clean   : Clean up the server (remove ontologies_linked_data, docker-compose files, and remove all containers)"
    echo "  help    : Show this help message"
	echo
    echo "Additional notes:"
    echo "- You can provide your own .env file to customize parameters:"
    echo "  Just put the .env file in this directory and run $0 start"
}

case "$1" in
  "start")
  	start "$2"
   ;;
   "deploy")
  	deploy "$2"
   ;;
  "stop")
    stop
    ;;
  "clean")
    clean
    ;;
  "help")
    show_help
    ;;
  *)
    show_help
    exit 1
    ;;
esac