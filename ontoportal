#!/usr/bin/env bash
setup() {
  if [ -f ".env" ]; then
    echo "[+] Env file exist"
  else
    echo "[+] Env file does not exist"
    cp .env.sample .env
  fi
}

which_service() {
  if [ -z "$1" ]; then
    SERVICE="ontoportal"
  else
    SERVICE="$1"
  fi

  echo "$SERVICE"
}

clean() {
  echo "[+] Cleaning the server"

  # Check if the -f flag is set
  FORCE=false
  for arg in "$@"; do
    if [ "$arg" == "-f" ]; then
      FORCE=true
      break
    fi
  done

  if [ "$FORCE" == true ]; then
    answer="y"
  else
    read -p "Too risky and not needed in production, useful only locally to reset all the containers and volumes. Do you want to continue? (y/n): " answer
  fi

  if [[ "$answer" == "y" ]]; then
    ./bin/run_ui.sh clean
    ./bin/run_api.sh clean
  else
    echo "You chose to exit. Goodbye!"
  fi
}

update() {
  SERVICE=$(which_service "$1")

  if [ "$SERVICE" == "api" ]; then
    echo "[+] Updating API images to latest version"
    ./bin/run_api.sh update
  elif [ "$SERVICE" == "ui" ]; then
    echo "[+] Updating UI images to latest version"
    ./bin/run_ui.sh update
  else
    echo "[+] Updating UI and API images to latest version"
    ./bin/run_api.sh update
    ./bin/run_ui.sh update
  fi
}

stop() {
  SERVICE=$(which_service "$1")

  echo "[+] Stopping $SERVICE services"

  if [ "$SERVICE" == "api" ]; then
    ./bin/run_api.sh stop
  elif [ "$SERVICE" == "ui" ]; then
    ./bin/run_ui.sh stop
  else
    ./bin/run_ui.sh stop
    ./bin/run_api.sh stop
  fi
}

logs() {
  SERVICE=$(which_service "$1")


  if [ "$SERVICE" == "api" ]; then
    ./bin/run_api.sh logs
  elif [ "$SERVICE" == "ui" ]; then
    ./bin/run_ui.sh logs
  else
    echo "Choose which service to display logs API or UI"
  fi
}

deploy() {
  ./bin/deploy.sh "$1"
}

start() {
  if [ -z "$1" ]; then
    SERVICE="ontoportal"
  else
    SERVICE="$1"
  fi

  SERVICE=$(which_service "$1")

  # Update SERVICE variable in .env
  awk -v SERVICE="$SERVICE" '/^SERVICE=/{sub(/=.*/, "=" SERVICE)} 1' .env >temp && mv temp .env

  source .env

  if [ "$SERVICE" == "api" ]; then
    ./bin/run_api.sh start
  elif [ "$SERVICE" == "ui" ]; then
    ./bin/run_ui.sh start
  else
    # Update API_URL to api-service:9393 in run script
    env_content=$(<"./.env")
    env_content="${env_content//API_URL=http:\/\/localhost:9393/API_URL=http:\/\/api-service:9393}"
    echo "$env_content" >"./.env"
    ./bin/run_api.sh start
    ./bin/run_ui.sh start
  fi
}

show_help() {
  echo "Usage: $0 <command>"
  echo
  echo "Commands:"
  echo "  start   : Start the ontologies API and UI (Default Mode / Personilized Mode)"
  echo "  deploy  : Deploy the application using Kamal to the server"
  echo "  stop    : Stop the API and UI services"
  echo "  clean   : Clean up the server, WARNING: remove the data, docker-compose files, and all containers"
  echo "  update  : Pull and update the containers (UI & API) versions to the latest version"
  echo "  help    : Show this help message"
  echo
  echo "Additional notes:"
  echo "- You can provide your own .env file to customize parameters:"
  echo "  Just put the .env file in this directory and run $0 start"
}

source utils/ontoportal_logo.sh

setup

case "$1" in
  "start")
    start "$2"
    ;;
  "deploy")
    deploy "$2"
    ;;
  "stop")
    stop "$2"
    ;;
  "clean")
    clean "$2"
    ;;
  "update")
    update "$2"
    ;;
  "logs")
    logs "$2"
    ;;
  "help")
    show_help
    ;;
  *)
    show_help
    exit 1
    ;;
esac
